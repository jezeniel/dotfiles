set encoding=utf-8
set nocompatible
call plug#begin('~/.vim/plugged')

" Theme
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Productivity
Plug 'airblade/vim-gitgutter'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'andymass/vim-matchup'
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'dense-analysis/ale'
Plug 'easymotion/vim-easymotion'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vista.vim'
Plug 'machakann/vim-sandwich'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'

call plug#end()

syntax on
set history=100

filetype indent on

" Turn off wordwrap by default
set nowrap

" custom key mappings
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"
nnoremap <leader>w :w<CR>

" Vimux
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>

" Trailing whitespace guide
set lcs=eol:¬,tab:▶\ ,trail:∙
set list

" Easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)

" buffer navigation
noremap <silent> <leader>] :bn<CR>
noremap <silent> <leader>[ :bp<CR>

" FZF
let g:fzf_action = {
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '40%' }
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nnoremap <silent> <Leader><Leader> :Files<CR>
nnoremap <silent> <Leader><Enter> :Buffers<CR>
nnoremap <silent> <Leader>` :Marks<CR>
nnoremap <silent> <Leader>t :Rg<CR>
nnoremap <silent> <Leader>l :Lines<CR>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Enable true color
set termguicolors

" colorscheme
set bg=dark
colorscheme gruvbox

" airline
set noshowmode
" let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1

" netrw
let g:netrw_liststyle = 3
let g:netrw_banner = 0

" vista
let g:vista#renderer#enable_icon = 0
nnoremap <silent> <C-t> :Vista!!<CR>

" coc
inoremap <silent><expr> <c-space> coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Code guide for more than 80 characters
set colorcolumn=79

" Line numbering
set number

" 1 tab == 2 spaces
" set smarttab
set tabstop=2
set shiftwidth=2

" Use spaces instead of tabs
set expandtab

" set autoindent
" set smartindent

" Disable backup
set nobackup
set nowb
set noswapfile

set hidden

set ignorecase
set smartcase
set hlsearch
set incsearch

set ruler
set magic

" Clipboard
set clipboard=unnamed
set backspace=indent,eol,start

" Custom functions
command FormatJson execute "%! python -m json.tool"
