set encoding=utf-8
set nocompatible
call plug#begin('~/.vim/plugged')

" Theme
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Productivity
Plug 'airblade/vim-gitgutter'
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'easymotion/vim-easymotion'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}
Plug 'gregsexton/MatchTag'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'machakann/vim-sandwich'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/matchit.zip'
Plug 'dense-analysis/ale'
Plug 'majutsushi/tagbar'

call plug#end()

syntax on
set history=100
set autoread

filetype indent on


" Turn of wordwrap by default
set nowrap

" custom key mappings
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"
nnoremap <leader>w :w<CR>

" Sandwich
let g:sandwich_no_default_key_mappings = 1
let g:operator_sandwich_no_default_key_mappings = 1
let g:textobj_sandwich_no_default_key_mappings = 1
runtime macros/sandwich/keymap/surround.vim

" Ale
let g:ale_echo_cursor = 0

" Tagbar
nmap <F8> :TagbarToggle<CR>

" NERDCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Vimux
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>


" NERDTree
let g:NERDTreeWinPos = "right"
let g:NERDTreeIgnore = ['\.pyc$','\.rpyc$', '__pycache__']
let g:NERDTreeHijackNetrw = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeCascadeSingleChildDir = 0
map <C-n> :NERDTreeTabsToggle<CR>

" Trailing whitespace guide
set lcs=eol:¬,tab:▶\ ,trail:∙
set list

" syntastic
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_python_checkers = ['flake8']

" Tab management
map <leader>tn :tabnew<CR>

" Easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)

" remove hl navigation
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" buffer navigation
noremap <silent> <leader>] :bn<CR>
noremap <silent> <leader>[ :bp<CR>

" FZF
let g:fzf_action = {
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '40%' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nnoremap <silent> <Leader><Leader> :Files<CR>
nnoremap <silent> <Leader><Enter> :Buffers<CR>
nnoremap <silent> <Leader>` :Marks<CR>
nnoremap <silent> <Leader>t :Rg<CR>
nnoremap <silent> <Leader>l :Lines<CR>
imap <c-x><c-j> <plug>(fzf-complete-file-ag)

command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)


" colorscheme
set bg=dark
colorscheme gruvbox


" airline
set laststatus=2
set noshowmode
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Code guide for more than 80 characters
set colorcolumn=79

" Line numbering
set number

" 1 tab == 2 spaces
" set smarttab
set tabstop=2
set shiftwidth=2

" Use spaces instead of tabs
set expandtab

" set autoindent
" set smartindent

" Disable backup
set nobackup
set nowb
set noswapfile

set hidden

set ignorecase
set smartcase
set hlsearch
set incsearch

set ruler
set magic

set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
set guioptions-=e

" Clipboard
set clipboard=unnamed
set backspace=indent,eol,start

" Custom functions
command FormatJson execute "%! python -m json.tool"
